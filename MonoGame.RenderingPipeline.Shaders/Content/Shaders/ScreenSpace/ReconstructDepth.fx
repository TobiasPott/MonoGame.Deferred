//Depth Reconstruction from linear depth buffer, TheKosmonaut 2016

#include "../../Includes/Macros.incl.fx"
#define _DEPTH_MAP
#include "../../Includes/Maps.incl.fx"
#include "../../Includes/VertexStage.incl.fx"

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  VARIABLES
////////////////////////////////////////////////////////////////////////////////////////////////////////////

float4x4 Projection;

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  HELPER FUNCTIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////

float TransformDepth(float depth, matrix trafoMatrix)
{
	return (depth*trafoMatrix._33 + trafoMatrix._43) / (depth * trafoMatrix._34 + trafoMatrix._44);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  VERTEX SHADER
////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  PIXEL SHADER
////////////////////////////////////////////////////////////////////////////////////////////////////////////

#if DX10_OR_NEWER >= 1
float PixelShaderFunction(VSOut_PosTex input) : SV_Depth
#else
float4 PixelShaderFunction(VSOut_PosTex input) : SV_TARGET0
#endif
{
	float2 texCoord = float2(input.TexCoord);

    float linearDepth = DepthMap.Sample(DepthMapSampler, texCoord).r * -FarClip;
    
#if DX10_OR_NEWER >= 1
    return TransformDepth(linearDepth, Projection);
    #else
    return float4(TransformDepth(linearDepth, Projection), 0, 0, 0);
#endif
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  TECHNIQUES
////////////////////////////////////////////////////////////////////////////////////////////////////////////

technique RestoreDepth
{
	pass Pass1
	{
		COMPILE_VS(VSMain_Encoded);
		COMPILE_PS(PixelShaderFunction);
	}
}

